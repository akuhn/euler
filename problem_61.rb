require_relative 'euler'

# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers 
# are all figurate (polygonal) numbers and are generated by the following 
# formulae:
# 
# Triangle     P3,n=n(n+1)/2   1, 3, 6, 10, 15, ...
# Square       P4,n=n^1        1, 4, 9, 16, 25, ...
# Pentagonal   P5,n=n(3n-1)/2	 1, 5, 12, 22, 35, ...
# Hexagonal    P6,n=n(2n-1)    1, 6, 15, 28, 45, ...
# Heptagonal   P7,n=n(5n-3)/2  1, 7, 18, 34, 55, ...
# Octagonal    P8,n=n(3n-2)    1, 8, 21, 40, 65, ...
# 
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
# interesting properties.
# 
# The set is cyclic, in that the last two digits of each number is the first 
# two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
# pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which
# each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, 
# and octagonal, is represented by a different number in the set.

def polygonals(edge)
  return enum_for(:polygonals,edge) unless block_given?
  n,m,step = 0,1,edge-2
  loop do
    yield n = n + m
    m = m + step
  end
end

lists = (3..8).collect do |n|
  polygonals(n).take(200).grep(1000..9999)
end

def depth_first_search(state)
  nodes = [state]
  until nodes.empty?
    each = nodes.pop
    return each if each.found?
    each.children { |n| nodes << n }
  end
  return nil
end

class State < Struct.new(:lists,:cycle)
  def found?
    lists.empty? && cycle.last % 100 == cycle.first / 100
  end
  def children
    return if lists.empty?
    for list in lists
      remaining = lists - [list]
      for each in list
        next unless cycle.empty? || cycle.last % 100 == each / 100
        yield State.new(remaining,cycle.dup.push(each))
      end
    end
  end
end

depth_first_search(State.new(lists,[])).cycle.sum.should == 28684